{operators}
{A64 - Int}
{A66 - equals}
{A22}
{A67 - IntOperators}

min(x:Card, y:Card):Card
[* Gibt den kleineren Parameter zurück. *]
::= x.<(y).?(
		then --> x,
		else --> y);

fraction(enum:Int, denom:Int):Fraction
[* Stellt einen Bruch aus zwei ganzen Zahlen <enum> und <denom> dar. *];

Int <<< Fraction ::= fraction(x, 1);

normalizeFraction(x:Fraction) [x.denom.equals(0).!]:Fraction
[* Normalisiert den Bruch <x>. Das Vorzeichen steht immer im Zähler. *]
::= x.enum.=(0).?(
		then --> 0,
		else --> 
				[enum_abs --> x.enum.abs,
				denom_abs --> x.denom.abs]
				[y --> ggt(max(enum_abs, denom_abs), min(enum_abs, denom_abs))]

				x.enum.<(0).!=(x.denom.<(0)).?(
				then --> int(0, enum_abs./C/(y)),
				else --> enum_abs./C/(y)).fraction(denom_abs./C/(y)));